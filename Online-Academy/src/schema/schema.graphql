type Query {
  "Academy students list"
  students: [Student!]!
  "Student info found by id"
  student(id: ID!): Student!
  "Academy courses list"
  courses: [Course!]!
  "Course info found by id"
  course(id: ID!): Course!
}

type Mutation {
  newCourse(course: CourseInput!): String!
  updateCourse(course: CourseInput!): Course!
  deleteCourse(id: ID!): String! 
}

"Student Info"
type Student {
  id: ID!
  name: String!
  email: String!
  website: String
  courses: [Course!]!
}

type Course {
  id: ID!
  title: String
  description: String!
  clases: Int!
  time: Float!
  logo: String!
  level: Level!
  path: String!
  teacher: String!
  students: [Student]
  reviews: [Review!]!
}

input CourseInput {
  id: ID
  title: String!
  description: String!
  clases: Int!
  time: Float
  logo: String
  level: Level
  path: String
  teacher: String
}

enum Level {
  ALL
  NOOBS
  MEDIUM
  ADVANCED
}

type Review {
  id: ID!
  name: String!
  points: Float!
  comment: String
}